"""All input for the create `File` mutation."""
input CreateFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `File` to be created by this mutation."""
  file: FileInput!
}

"""The output of our create `File` mutation."""
type CreateFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `File` that was created by this mutation."""
  file: File

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `File`."""
  userByUploaderId: User

  """Reads a single `FileType` that is related to this `File`."""
  fileTypeByFileTypeId: FileType

  """An edge for our `File`. May be used by Relay 1."""
  fileEdge(
    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = PRIMARY_KEY_ASC
  ): FilesEdge
}

"""All input for the create `FileType` mutation."""
input CreateFileTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FileType` to be created by this mutation."""
  fileType: FileTypeInput!
}

"""The output of our create `FileType` mutation."""
type CreateFileTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FileType` that was created by this mutation."""
  fileType: FileType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FileType`. May be used by Relay 1."""
  fileTypeEdge(
    """The method to use when ordering `FileType`."""
    orderBy: [FileTypesOrderBy!] = PRIMARY_KEY_ASC
  ): FileTypesEdge
}

"""All input for the create `Game` mutation."""
input CreateGameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Game` to be created by this mutation."""
  game: GameInput!
}

"""All input for the create `GameMode` mutation."""
input CreateGameModeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GameMode` to be created by this mutation."""
  gameMode: GameModeInput!
}

"""The output of our create `GameMode` mutation."""
type CreateGameModePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GameMode` that was created by this mutation."""
  gameMode: GameMode

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `GameMode`. May be used by Relay 1."""
  gameModeEdge(
    """The method to use when ordering `GameMode`."""
    orderBy: [GameModesOrderBy!] = PRIMARY_KEY_ASC
  ): GameModesEdge
}

"""The output of our create `Game` mutation."""
type CreateGamePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Game` that was created by this mutation."""
  game: Game

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Game`. May be used by Relay 1."""
  gameEdge(
    """The method to use when ordering `Game`."""
    orderBy: [GamesOrderBy!] = PRIMARY_KEY_ASC
  ): GamesEdge
}

"""All input for the create `Image` mutation."""
input CreateImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Image` to be created by this mutation."""
  image: ImageInput!
}

"""The output of our create `Image` mutation."""
type CreateImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Image` that was created by this mutation."""
  image: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Image`."""
  userByUploaderId: User

  """An edge for our `Image`. May be used by Relay 1."""
  imageEdge(
    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = PRIMARY_KEY_ASC
  ): ImagesEdge
}

"""All input for the create `MapAuthor` mutation."""
input CreateMapAuthorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MapAuthor` to be created by this mutation."""
  mapAuthor: MapAuthorInput!
}

"""The output of our create `MapAuthor` mutation."""
type CreateMapAuthorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MapAuthor` that was created by this mutation."""
  mapAuthor: MapAuthor

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `MapAuthor`."""
  userByAuthorId: User

  """Reads a single `Map` that is related to this `MapAuthor`."""
  mapByMapId: Map

  """An edge for our `MapAuthor`. May be used by Relay 1."""
  mapAuthorEdge(
    """The method to use when ordering `MapAuthor`."""
    orderBy: [MapAuthorsOrderBy!] = PRIMARY_KEY_ASC
  ): MapAuthorsEdge
}

"""All input for the create `MapContributor` mutation."""
input CreateMapContributorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MapContributor` to be created by this mutation."""
  mapContributor: MapContributorInput!
}

"""The output of our create `MapContributor` mutation."""
type CreateMapContributorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MapContributor` that was created by this mutation."""
  mapContributor: MapContributor

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Map` that is related to this `MapContributor`."""
  mapByMapId: Map

  """Reads a single `User` that is related to this `MapContributor`."""
  userByUserId: User

  """An edge for our `MapContributor`. May be used by Relay 1."""
  mapContributorEdge(
    """The method to use when ordering `MapContributor`."""
    orderBy: [MapContributorsOrderBy!] = PRIMARY_KEY_ASC
  ): MapContributorsEdge
}

"""All input for the create `MapDescription` mutation."""
input CreateMapDescriptionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MapDescription` to be created by this mutation."""
  mapDescription: MapDescriptionInput!
}

"""The output of our create `MapDescription` mutation."""
type CreateMapDescriptionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MapDescription` that was created by this mutation."""
  mapDescription: MapDescription

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Map` that is related to this `MapDescription`."""
  mapByMapId: Map

  """
  Reads a single `TextMarkdown` that is related to this `MapDescription`.
  """
  textMarkdownByTextMarkdownId: TextMarkdown

  """An edge for our `MapDescription`. May be used by Relay 1."""
  mapDescriptionEdge(
    """The method to use when ordering `MapDescription`."""
    orderBy: [MapDescriptionsOrderBy!] = PRIMARY_KEY_ASC
  ): MapDescriptionsEdge
}

"""All input for the create `MapFile` mutation."""
input CreateMapFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MapFile` to be created by this mutation."""
  mapFile: MapFileInput!
}

"""The output of our create `MapFile` mutation."""
type CreateMapFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MapFile` that was created by this mutation."""
  mapFile: MapFile

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Map` that is related to this `MapFile`."""
  mapByMapId: Map

  """Reads a single `File` that is related to this `MapFile`."""
  fileByFileId: File

  """Reads a single `Game` that is related to this `MapFile`."""
  gameByGameId: Game

  """An edge for our `MapFile`. May be used by Relay 1."""
  mapFileEdge(
    """The method to use when ordering `MapFile`."""
    orderBy: [MapFilesOrderBy!] = PRIMARY_KEY_ASC
  ): MapFilesEdge
}

"""All input for the create `MapImage` mutation."""
input CreateMapImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MapImage` to be created by this mutation."""
  mapImage: MapImageInput!
}

"""The output of our create `MapImage` mutation."""
type CreateMapImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MapImage` that was created by this mutation."""
  mapImage: MapImage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Map` that is related to this `MapImage`."""
  mapByMapId: Map

  """Reads a single `Image` that is related to this `MapImage`."""
  imageByImageId: Image

  """An edge for our `MapImage`. May be used by Relay 1."""
  mapImageEdge(
    """The method to use when ordering `MapImage`."""
    orderBy: [MapImagesOrderBy!] = PRIMARY_KEY_ASC
  ): MapImagesEdge
}

"""All input for the create `Map` mutation."""
input CreateMapInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Map` to be created by this mutation."""
  map: MapInput!
}

"""The output of our create `Map` mutation."""
type CreateMapPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Map` that was created by this mutation."""
  map: Map

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `GameMode` that is related to this `Map`."""
  gameModeByGameModeId: GameMode

  """Reads a single `Game` that is related to this `Map`."""
  gameByGameId: Game

  """Reads a single `MapType` that is related to this `Map`."""
  mapTypeByMapTypeId: MapType

  """Reads a single `User` that is related to this `Map`."""
  userByUploaderId: User

  """An edge for our `Map`. May be used by Relay 1."""
  mapEdge(
    """The method to use when ordering `Map`."""
    orderBy: [MapsOrderBy!] = PRIMARY_KEY_ASC
  ): MapsEdge
}

"""All input for the create `MapType` mutation."""
input CreateMapTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MapType` to be created by this mutation."""
  mapType: MapTypeInput!
}

"""The output of our create `MapType` mutation."""
type CreateMapTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MapType` that was created by this mutation."""
  mapType: MapType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MapType`. May be used by Relay 1."""
  mapTypeEdge(
    """The method to use when ordering `MapType`."""
    orderBy: [MapTypesOrderBy!] = PRIMARY_KEY_ASC
  ): MapTypesEdge
}

"""All input for the create `StageImage` mutation."""
input CreateStageImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `StageImage` to be created by this mutation."""
  stageImage: StageImageInput!
}

"""The output of our create `StageImage` mutation."""
type CreateStageImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StageImage` that was created by this mutation."""
  stageImage: StageImage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Stage` that is related to this `StageImage`."""
  stageByStageId: Stage

  """Reads a single `Image` that is related to this `StageImage`."""
  imageByImageId: Image

  """An edge for our `StageImage`. May be used by Relay 1."""
  stageImageEdge(
    """The method to use when ordering `StageImage`."""
    orderBy: [StageImagesOrderBy!] = PRIMARY_KEY_ASC
  ): StageImagesEdge
}

"""All input for the create `Stage` mutation."""
input CreateStageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Stage` to be created by this mutation."""
  stage: StageInput!
}

"""The output of our create `Stage` mutation."""
type CreateStagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Stage` that was created by this mutation."""
  stage: Stage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Map` that is related to this `Stage`."""
  mapByMapId: Map

  """Reads a single `StageType` that is related to this `Stage`."""
  stageTypeByStageTypeId: StageType

  """Reads a single `User` that is related to this `Stage`."""
  userByAuthorId: User

  """An edge for our `Stage`. May be used by Relay 1."""
  stageEdge(
    """The method to use when ordering `Stage`."""
    orderBy: [StagesOrderBy!] = PRIMARY_KEY_ASC
  ): StagesEdge
}

"""All input for the create `StageType` mutation."""
input CreateStageTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `StageType` to be created by this mutation."""
  stageType: StageTypeInput!
}

"""The output of our create `StageType` mutation."""
type CreateStageTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StageType` that was created by this mutation."""
  stageType: StageType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `StageType`. May be used by Relay 1."""
  stageTypeEdge(
    """The method to use when ordering `StageType`."""
    orderBy: [StageTypesOrderBy!] = PRIMARY_KEY_ASC
  ): StageTypesEdge
}

"""All input for the create `TextMarkdown` mutation."""
input CreateTextMarkdownInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TextMarkdown` to be created by this mutation."""
  textMarkdown: TextMarkdownInput!
}

"""The output of our create `TextMarkdown` mutation."""
type CreateTextMarkdownPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TextMarkdown` that was created by this mutation."""
  textMarkdown: TextMarkdown

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `TextMarkdown`."""
  userByAuthorId: User

  """An edge for our `TextMarkdown`. May be used by Relay 1."""
  textMarkdownEdge(
    """The method to use when ordering `TextMarkdown`."""
    orderBy: [TextMarkdownsOrderBy!] = PRIMARY_KEY_ASC
  ): TextMarkdownsEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = PRIMARY_KEY_ASC
  ): UsersEdge
}

"""All input for the create `UserSteamInfo` mutation."""
input CreateUserSteamInfoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserSteamInfo` to be created by this mutation."""
  userSteamInfo: UserSteamInfoInput!
}

"""The output of our create `UserSteamInfo` mutation."""
type CreateUserSteamInfoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserSteamInfo` that was created by this mutation."""
  userSteamInfo: UserSteamInfo

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserSteamInfo`."""
  userByUserId: User

  """An edge for our `UserSteamInfo`. May be used by Relay 1."""
  userSteamInfoEdge(
    """The method to use when ordering `UserSteamInfo`."""
    orderBy: [UserSteamInfosOrderBy!] = PRIMARY_KEY_ASC
  ): UserSteamInfosEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteFileByRowId` mutation."""
input DeleteFileByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: UUID!
}

"""All input for the `deleteFile` mutation."""
input DeleteFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `File` to be deleted.
  """
  id: ID!
}

"""The output of our delete `File` mutation."""
type DeleteFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `File` that was deleted by this mutation."""
  file: File
  deletedFileId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `File`."""
  userByUploaderId: User

  """Reads a single `FileType` that is related to this `File`."""
  fileTypeByFileTypeId: FileType

  """An edge for our `File`. May be used by Relay 1."""
  fileEdge(
    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = PRIMARY_KEY_ASC
  ): FilesEdge
}

"""All input for the `deleteFileTypeByRowId` mutation."""
input DeleteFileTypeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: UUID!
}

"""All input for the `deleteFileType` mutation."""
input DeleteFileTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FileType` to be deleted.
  """
  id: ID!
}

"""The output of our delete `FileType` mutation."""
type DeleteFileTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FileType` that was deleted by this mutation."""
  fileType: FileType
  deletedFileTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FileType`. May be used by Relay 1."""
  fileTypeEdge(
    """The method to use when ordering `FileType`."""
    orderBy: [FileTypesOrderBy!] = PRIMARY_KEY_ASC
  ): FileTypesEdge
}

"""All input for the `deleteGameByRowId` mutation."""
input DeleteGameByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: UUID!
}

"""All input for the `deleteGame` mutation."""
input DeleteGameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Game` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteGameModeByRowId` mutation."""
input DeleteGameModeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: UUID!
}

"""All input for the `deleteGameMode` mutation."""
input DeleteGameModeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GameMode` to be deleted.
  """
  id: ID!
}

"""The output of our delete `GameMode` mutation."""
type DeleteGameModePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GameMode` that was deleted by this mutation."""
  gameMode: GameMode
  deletedGameModeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `GameMode`. May be used by Relay 1."""
  gameModeEdge(
    """The method to use when ordering `GameMode`."""
    orderBy: [GameModesOrderBy!] = PRIMARY_KEY_ASC
  ): GameModesEdge
}

"""The output of our delete `Game` mutation."""
type DeleteGamePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Game` that was deleted by this mutation."""
  game: Game
  deletedGameId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Game`. May be used by Relay 1."""
  gameEdge(
    """The method to use when ordering `Game`."""
    orderBy: [GamesOrderBy!] = PRIMARY_KEY_ASC
  ): GamesEdge
}

"""All input for the `deleteImageByRowId` mutation."""
input DeleteImageByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: UUID!
}

"""All input for the `deleteImage` mutation."""
input DeleteImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Image` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Image` mutation."""
type DeleteImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Image` that was deleted by this mutation."""
  image: Image
  deletedImageId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Image`."""
  userByUploaderId: User

  """An edge for our `Image`. May be used by Relay 1."""
  imageEdge(
    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = PRIMARY_KEY_ASC
  ): ImagesEdge
}

"""All input for the `deleteMapAuthorByAuthorIdAndMapId` mutation."""
input DeleteMapAuthorByAuthorIdAndMapIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  authorId: UUID!
  mapId: UUID!
}

"""All input for the `deleteMapAuthor` mutation."""
input DeleteMapAuthorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MapAuthor` to be deleted.
  """
  id: ID!
}

"""The output of our delete `MapAuthor` mutation."""
type DeleteMapAuthorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MapAuthor` that was deleted by this mutation."""
  mapAuthor: MapAuthor
  deletedMapAuthorId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `MapAuthor`."""
  userByAuthorId: User

  """Reads a single `Map` that is related to this `MapAuthor`."""
  mapByMapId: Map

  """An edge for our `MapAuthor`. May be used by Relay 1."""
  mapAuthorEdge(
    """The method to use when ordering `MapAuthor`."""
    orderBy: [MapAuthorsOrderBy!] = PRIMARY_KEY_ASC
  ): MapAuthorsEdge
}

"""All input for the `deleteMapByName` mutation."""
input DeleteMapByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""All input for the `deleteMapByRowId` mutation."""
input DeleteMapByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: UUID!
}

"""All input for the `deleteMapContributorByRowId` mutation."""
input DeleteMapContributorByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: UUID!
}

"""All input for the `deleteMapContributor` mutation."""
input DeleteMapContributorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MapContributor` to be deleted.
  """
  id: ID!
}

"""The output of our delete `MapContributor` mutation."""
type DeleteMapContributorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MapContributor` that was deleted by this mutation."""
  mapContributor: MapContributor
  deletedMapContributorId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Map` that is related to this `MapContributor`."""
  mapByMapId: Map

  """Reads a single `User` that is related to this `MapContributor`."""
  userByUserId: User

  """An edge for our `MapContributor`. May be used by Relay 1."""
  mapContributorEdge(
    """The method to use when ordering `MapContributor`."""
    orderBy: [MapContributorsOrderBy!] = PRIMARY_KEY_ASC
  ): MapContributorsEdge
}

"""
All input for the `deleteMapDescriptionByMapIdAndTextMarkdownId` mutation.
"""
input DeleteMapDescriptionByMapIdAndTextMarkdownIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  mapId: UUID!
  textMarkdownId: UUID!
}

"""All input for the `deleteMapDescription` mutation."""
input DeleteMapDescriptionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MapDescription` to be deleted.
  """
  id: ID!
}

"""The output of our delete `MapDescription` mutation."""
type DeleteMapDescriptionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MapDescription` that was deleted by this mutation."""
  mapDescription: MapDescription
  deletedMapDescriptionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Map` that is related to this `MapDescription`."""
  mapByMapId: Map

  """
  Reads a single `TextMarkdown` that is related to this `MapDescription`.
  """
  textMarkdownByTextMarkdownId: TextMarkdown

  """An edge for our `MapDescription`. May be used by Relay 1."""
  mapDescriptionEdge(
    """The method to use when ordering `MapDescription`."""
    orderBy: [MapDescriptionsOrderBy!] = PRIMARY_KEY_ASC
  ): MapDescriptionsEdge
}

"""All input for the `deleteMapFileByMapIdAndFileId` mutation."""
input DeleteMapFileByMapIdAndFileIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  mapId: UUID!
  fileId: UUID!
}

"""All input for the `deleteMapFile` mutation."""
input DeleteMapFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MapFile` to be deleted.
  """
  id: ID!
}

"""The output of our delete `MapFile` mutation."""
type DeleteMapFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MapFile` that was deleted by this mutation."""
  mapFile: MapFile
  deletedMapFileId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Map` that is related to this `MapFile`."""
  mapByMapId: Map

  """Reads a single `File` that is related to this `MapFile`."""
  fileByFileId: File

  """Reads a single `Game` that is related to this `MapFile`."""
  gameByGameId: Game

  """An edge for our `MapFile`. May be used by Relay 1."""
  mapFileEdge(
    """The method to use when ordering `MapFile`."""
    orderBy: [MapFilesOrderBy!] = PRIMARY_KEY_ASC
  ): MapFilesEdge
}

"""All input for the `deleteMapImageByMapIdAndImageId` mutation."""
input DeleteMapImageByMapIdAndImageIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  mapId: UUID!
  imageId: UUID!
}

"""All input for the `deleteMapImage` mutation."""
input DeleteMapImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MapImage` to be deleted.
  """
  id: ID!
}

"""The output of our delete `MapImage` mutation."""
type DeleteMapImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MapImage` that was deleted by this mutation."""
  mapImage: MapImage
  deletedMapImageId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Map` that is related to this `MapImage`."""
  mapByMapId: Map

  """Reads a single `Image` that is related to this `MapImage`."""
  imageByImageId: Image

  """An edge for our `MapImage`. May be used by Relay 1."""
  mapImageEdge(
    """The method to use when ordering `MapImage`."""
    orderBy: [MapImagesOrderBy!] = PRIMARY_KEY_ASC
  ): MapImagesEdge
}

"""All input for the `deleteMap` mutation."""
input DeleteMapInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Map` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Map` mutation."""
type DeleteMapPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Map` that was deleted by this mutation."""
  map: Map
  deletedMapId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `GameMode` that is related to this `Map`."""
  gameModeByGameModeId: GameMode

  """Reads a single `Game` that is related to this `Map`."""
  gameByGameId: Game

  """Reads a single `MapType` that is related to this `Map`."""
  mapTypeByMapTypeId: MapType

  """Reads a single `User` that is related to this `Map`."""
  userByUploaderId: User

  """An edge for our `Map`. May be used by Relay 1."""
  mapEdge(
    """The method to use when ordering `Map`."""
    orderBy: [MapsOrderBy!] = PRIMARY_KEY_ASC
  ): MapsEdge
}

"""All input for the `deleteMapTypeByRowId` mutation."""
input DeleteMapTypeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: UUID!
}

"""All input for the `deleteMapType` mutation."""
input DeleteMapTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MapType` to be deleted.
  """
  id: ID!
}

"""The output of our delete `MapType` mutation."""
type DeleteMapTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MapType` that was deleted by this mutation."""
  mapType: MapType
  deletedMapTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MapType`. May be used by Relay 1."""
  mapTypeEdge(
    """The method to use when ordering `MapType`."""
    orderBy: [MapTypesOrderBy!] = PRIMARY_KEY_ASC
  ): MapTypesEdge
}

"""All input for the `deleteStageByRowId` mutation."""
input DeleteStageByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: UUID!
}

"""All input for the `deleteStageImageByStageIdAndImageId` mutation."""
input DeleteStageImageByStageIdAndImageIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  stageId: UUID!
  imageId: UUID!
}

"""All input for the `deleteStageImage` mutation."""
input DeleteStageImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `StageImage` to be deleted.
  """
  id: ID!
}

"""The output of our delete `StageImage` mutation."""
type DeleteStageImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StageImage` that was deleted by this mutation."""
  stageImage: StageImage
  deletedStageImageId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Stage` that is related to this `StageImage`."""
  stageByStageId: Stage

  """Reads a single `Image` that is related to this `StageImage`."""
  imageByImageId: Image

  """An edge for our `StageImage`. May be used by Relay 1."""
  stageImageEdge(
    """The method to use when ordering `StageImage`."""
    orderBy: [StageImagesOrderBy!] = PRIMARY_KEY_ASC
  ): StageImagesEdge
}

"""All input for the `deleteStage` mutation."""
input DeleteStageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Stage` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Stage` mutation."""
type DeleteStagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Stage` that was deleted by this mutation."""
  stage: Stage
  deletedStageId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Map` that is related to this `Stage`."""
  mapByMapId: Map

  """Reads a single `StageType` that is related to this `Stage`."""
  stageTypeByStageTypeId: StageType

  """Reads a single `User` that is related to this `Stage`."""
  userByAuthorId: User

  """An edge for our `Stage`. May be used by Relay 1."""
  stageEdge(
    """The method to use when ordering `Stage`."""
    orderBy: [StagesOrderBy!] = PRIMARY_KEY_ASC
  ): StagesEdge
}

"""All input for the `deleteStageTypeByRowId` mutation."""
input DeleteStageTypeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: UUID!
}

"""All input for the `deleteStageType` mutation."""
input DeleteStageTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `StageType` to be deleted.
  """
  id: ID!
}

"""The output of our delete `StageType` mutation."""
type DeleteStageTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StageType` that was deleted by this mutation."""
  stageType: StageType
  deletedStageTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `StageType`. May be used by Relay 1."""
  stageTypeEdge(
    """The method to use when ordering `StageType`."""
    orderBy: [StageTypesOrderBy!] = PRIMARY_KEY_ASC
  ): StageTypesEdge
}

"""All input for the `deleteTextMarkdownByRowId` mutation."""
input DeleteTextMarkdownByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: UUID!
}

"""All input for the `deleteTextMarkdown` mutation."""
input DeleteTextMarkdownInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TextMarkdown` to be deleted.
  """
  id: ID!
}

"""The output of our delete `TextMarkdown` mutation."""
type DeleteTextMarkdownPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TextMarkdown` that was deleted by this mutation."""
  textMarkdown: TextMarkdown
  deletedTextMarkdownId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `TextMarkdown`."""
  userByAuthorId: User

  """An edge for our `TextMarkdown`. May be used by Relay 1."""
  textMarkdownEdge(
    """The method to use when ordering `TextMarkdown`."""
    orderBy: [TextMarkdownsOrderBy!] = PRIMARY_KEY_ASC
  ): TextMarkdownsEdge
}

"""All input for the `deleteUserByRowId` mutation."""
input DeleteUserByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: UUID!
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  id: ID!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was deleted by this mutation."""
  user: User
  deletedUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = PRIMARY_KEY_ASC
  ): UsersEdge
}

"""All input for the `deleteUserSteamInfoByUserId` mutation."""
input DeleteUserSteamInfoByUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: UUID!
}

"""All input for the `deleteUserSteamInfo` mutation."""
input DeleteUserSteamInfoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserSteamInfo` to be deleted.
  """
  id: ID!
}

"""The output of our delete `UserSteamInfo` mutation."""
type DeleteUserSteamInfoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserSteamInfo` that was deleted by this mutation."""
  userSteamInfo: UserSteamInfo
  deletedUserSteamInfoId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserSteamInfo`."""
  userByUserId: User

  """An edge for our `UserSteamInfo`. May be used by Relay 1."""
  userSteamInfoEdge(
    """The method to use when ordering `UserSteamInfo`."""
    orderBy: [UserSteamInfosOrderBy!] = PRIMARY_KEY_ASC
  ): UserSteamInfosEdge
}

type File implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: UUID!
  storeLocation: String!
  createdAt: Datetime!
  active: Boolean!
  uploaderId: UUID!
  fileTypeId: UUID!

  """Reads a single `User` that is related to this `File`."""
  userByUploaderId: User

  """Reads a single `FileType` that is related to this `File`."""
  fileTypeByFileTypeId: FileType

  """Reads and enables pagination through a set of `MapFile`."""
  mapFilesByFileId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MapFile`."""
    orderBy: [MapFilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MapFileCondition
  ): MapFilesConnection!
}

"""
A condition to be used against `File` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FileCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID

  """Checks for equality with the object’s `storeLocation` field."""
  storeLocation: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `active` field."""
  active: Boolean

  """Checks for equality with the object’s `uploaderId` field."""
  uploaderId: UUID

  """Checks for equality with the object’s `fileTypeId` field."""
  fileTypeId: UUID
}

"""An input for mutations affecting `File`"""
input FileInput {
  rowId: UUID
  storeLocation: String!
  createdAt: Datetime
  active: Boolean
  uploaderId: UUID!
  fileTypeId: UUID!
}

"""Represents an update to a `File`. Fields that are set will be updated."""
input FilePatch {
  rowId: UUID
  storeLocation: String
  createdAt: Datetime
  active: Boolean
  uploaderId: UUID
  fileTypeId: UUID
}

"""A connection to a list of `File` values."""
type FilesConnection {
  """A list of `File` objects."""
  nodes: [File]!

  """
  A list of edges which contains the `File` and cursor to aid in pagination.
  """
  edges: [FilesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `File` you could get from the connection."""
  totalCount: Int!
}

"""A `File` edge in the connection."""
type FilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `File` at the end of the edge."""
  node: File
}

"""Methods to use when ordering `File`."""
enum FilesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  STORE_LOCATION_ASC
  STORE_LOCATION_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ACTIVE_ASC
  ACTIVE_DESC
  UPLOADER_ID_ASC
  UPLOADER_ID_DESC
  FILE_TYPE_ID_ASC
  FILE_TYPE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type FileType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: UUID!
  name: String!

  """Reads and enables pagination through a set of `File`."""
  filesByFileTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition
  ): FilesConnection!
}

"""
A condition to be used against `FileType` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FileTypeCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""An input for mutations affecting `FileType`"""
input FileTypeInput {
  rowId: UUID
  name: String!
}

"""
Represents an update to a `FileType`. Fields that are set will be updated.
"""
input FileTypePatch {
  rowId: UUID
  name: String
}

"""A connection to a list of `FileType` values."""
type FileTypesConnection {
  """A list of `FileType` objects."""
  nodes: [FileType]!

  """
  A list of edges which contains the `FileType` and cursor to aid in pagination.
  """
  edges: [FileTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FileType` you could get from the connection."""
  totalCount: Int!
}

"""A `FileType` edge in the connection."""
type FileTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FileType` at the end of the edge."""
  node: FileType
}

"""Methods to use when ordering `FileType`."""
enum FileTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Game implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: UUID!
  name: String!
  abbreviation: String!

  """Reads and enables pagination through a set of `Map`."""
  mapsByGameId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Map`."""
    orderBy: [MapsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MapCondition
  ): MapsConnection!

  """Reads and enables pagination through a set of `MapFile`."""
  mapFilesByGameId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MapFile`."""
    orderBy: [MapFilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MapFileCondition
  ): MapFilesConnection!
}

"""
A condition to be used against `Game` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GameCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `abbreviation` field."""
  abbreviation: String
}

"""An input for mutations affecting `Game`"""
input GameInput {
  rowId: UUID
  name: String!
  abbreviation: String!
}

type GameMode implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: UUID!
  name: String!

  """Reads and enables pagination through a set of `Map`."""
  mapsByGameModeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Map`."""
    orderBy: [MapsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MapCondition
  ): MapsConnection!
}

"""
A condition to be used against `GameMode` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GameModeCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""An input for mutations affecting `GameMode`"""
input GameModeInput {
  rowId: UUID
  name: String!
}

"""
Represents an update to a `GameMode`. Fields that are set will be updated.
"""
input GameModePatch {
  rowId: UUID
  name: String
}

"""A connection to a list of `GameMode` values."""
type GameModesConnection {
  """A list of `GameMode` objects."""
  nodes: [GameMode]!

  """
  A list of edges which contains the `GameMode` and cursor to aid in pagination.
  """
  edges: [GameModesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GameMode` you could get from the connection."""
  totalCount: Int!
}

"""A `GameMode` edge in the connection."""
type GameModesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GameMode` at the end of the edge."""
  node: GameMode
}

"""Methods to use when ordering `GameMode`."""
enum GameModesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Represents an update to a `Game`. Fields that are set will be updated."""
input GamePatch {
  rowId: UUID
  name: String
  abbreviation: String
}

"""A connection to a list of `Game` values."""
type GamesConnection {
  """A list of `Game` objects."""
  nodes: [Game]!

  """
  A list of edges which contains the `Game` and cursor to aid in pagination.
  """
  edges: [GamesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Game` you could get from the connection."""
  totalCount: Int!
}

"""A `Game` edge in the connection."""
type GamesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Game` at the end of the edge."""
  node: Game
}

"""Methods to use when ordering `Game`."""
enum GamesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  ABBREVIATION_ASC
  ABBREVIATION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Image implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: UUID!
  storeLocation: String!
  uploaderId: UUID!
  uploadedAt: Time!
  isOrphan: Boolean!

  """Reads a single `User` that is related to this `Image`."""
  userByUploaderId: User

  """Reads and enables pagination through a set of `MapImage`."""
  mapImagesByImageId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MapImage`."""
    orderBy: [MapImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MapImageCondition
  ): MapImagesConnection!

  """Reads and enables pagination through a set of `StageImage`."""
  stageImagesByImageId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StageImage`."""
    orderBy: [StageImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StageImageCondition
  ): StageImagesConnection!
}

"""
A condition to be used against `Image` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ImageCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID

  """Checks for equality with the object’s `storeLocation` field."""
  storeLocation: String

  """Checks for equality with the object’s `uploaderId` field."""
  uploaderId: UUID

  """Checks for equality with the object’s `uploadedAt` field."""
  uploadedAt: Time

  """Checks for equality with the object’s `isOrphan` field."""
  isOrphan: Boolean
}

"""An input for mutations affecting `Image`"""
input ImageInput {
  rowId: UUID
  storeLocation: String!
  uploaderId: UUID!
  uploadedAt: Time
  isOrphan: Boolean
}

"""
Represents an update to a `Image`. Fields that are set will be updated.
"""
input ImagePatch {
  rowId: UUID
  storeLocation: String
  uploaderId: UUID
  uploadedAt: Time
  isOrphan: Boolean
}

"""A connection to a list of `Image` values."""
type ImagesConnection {
  """A list of `Image` objects."""
  nodes: [Image]!

  """
  A list of edges which contains the `Image` and cursor to aid in pagination.
  """
  edges: [ImagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Image` you could get from the connection."""
  totalCount: Int!
}

"""A `Image` edge in the connection."""
type ImagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Image` at the end of the edge."""
  node: Image
}

"""Methods to use when ordering `Image`."""
enum ImagesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  STORE_LOCATION_ASC
  STORE_LOCATION_DESC
  UPLOADER_ID_ASC
  UPLOADER_ID_DESC
  UPLOADED_AT_ASC
  UPLOADED_AT_DESC
  IS_ORPHAN_ASC
  IS_ORPHAN_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Map implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: UUID!
  name: String!
  public: Boolean!
  createdAt: Datetime!
  updatedAt: Datetime!
  gameModeId: UUID!
  gameId: UUID!
  mapTypeId: UUID!
  uploaderId: UUID!
  tier: Int!
  releasedAt: Datetime!

  """Reads a single `GameMode` that is related to this `Map`."""
  gameModeByGameModeId: GameMode

  """Reads a single `Game` that is related to this `Map`."""
  gameByGameId: Game

  """Reads a single `MapType` that is related to this `Map`."""
  mapTypeByMapTypeId: MapType

  """Reads a single `User` that is related to this `Map`."""
  userByUploaderId: User

  """Reads and enables pagination through a set of `Stage`."""
  stagesByMapId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Stage`."""
    orderBy: [StagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StageCondition
  ): StagesConnection!

  """Reads and enables pagination through a set of `MapDescription`."""
  mapDescriptionsByMapId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MapDescription`."""
    orderBy: [MapDescriptionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MapDescriptionCondition
  ): MapDescriptionsConnection!

  """Reads and enables pagination through a set of `MapImage`."""
  mapImagesByMapId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MapImage`."""
    orderBy: [MapImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MapImageCondition
  ): MapImagesConnection!

  """Reads and enables pagination through a set of `MapAuthor`."""
  mapAuthorsByMapId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MapAuthor`."""
    orderBy: [MapAuthorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MapAuthorCondition
  ): MapAuthorsConnection!

  """Reads and enables pagination through a set of `MapFile`."""
  mapFilesByMapId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MapFile`."""
    orderBy: [MapFilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MapFileCondition
  ): MapFilesConnection!

  """Reads and enables pagination through a set of `MapContributor`."""
  mapContributorsByMapId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MapContributor`."""
    orderBy: [MapContributorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MapContributorCondition
  ): MapContributorsConnection!
}

type MapAuthor implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  authorId: UUID!
  mapId: UUID!
  contribution: String

  """Reads a single `User` that is related to this `MapAuthor`."""
  userByAuthorId: User

  """Reads a single `Map` that is related to this `MapAuthor`."""
  mapByMapId: Map
}

"""
A condition to be used against `MapAuthor` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MapAuthorCondition {
  """Checks for equality with the object’s `authorId` field."""
  authorId: UUID

  """Checks for equality with the object’s `mapId` field."""
  mapId: UUID

  """Checks for equality with the object’s `contribution` field."""
  contribution: String
}

"""An input for mutations affecting `MapAuthor`"""
input MapAuthorInput {
  authorId: UUID!
  mapId: UUID!
  contribution: String
}

"""
Represents an update to a `MapAuthor`. Fields that are set will be updated.
"""
input MapAuthorPatch {
  authorId: UUID
  mapId: UUID
  contribution: String
}

"""A connection to a list of `MapAuthor` values."""
type MapAuthorsConnection {
  """A list of `MapAuthor` objects."""
  nodes: [MapAuthor]!

  """
  A list of edges which contains the `MapAuthor` and cursor to aid in pagination.
  """
  edges: [MapAuthorsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MapAuthor` you could get from the connection."""
  totalCount: Int!
}

"""A `MapAuthor` edge in the connection."""
type MapAuthorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MapAuthor` at the end of the edge."""
  node: MapAuthor
}

"""Methods to use when ordering `MapAuthor`."""
enum MapAuthorsOrderBy {
  NATURAL
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  MAP_ID_ASC
  MAP_ID_DESC
  CONTRIBUTION_ASC
  CONTRIBUTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Map` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MapCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `public` field."""
  public: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `gameModeId` field."""
  gameModeId: UUID

  """Checks for equality with the object’s `gameId` field."""
  gameId: UUID

  """Checks for equality with the object’s `mapTypeId` field."""
  mapTypeId: UUID

  """Checks for equality with the object’s `uploaderId` field."""
  uploaderId: UUID

  """Checks for equality with the object’s `tier` field."""
  tier: Int

  """Checks for equality with the object’s `releasedAt` field."""
  releasedAt: Datetime
}

type MapContributor implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  mapId: UUID!
  userId: UUID!
  contribution: String!
  rowId: UUID!

  """Reads a single `Map` that is related to this `MapContributor`."""
  mapByMapId: Map

  """Reads a single `User` that is related to this `MapContributor`."""
  userByUserId: User
}

"""
A condition to be used against `MapContributor` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input MapContributorCondition {
  """Checks for equality with the object’s `mapId` field."""
  mapId: UUID

  """Checks for equality with the object’s `userId` field."""
  userId: UUID

  """Checks for equality with the object’s `contribution` field."""
  contribution: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID
}

"""An input for mutations affecting `MapContributor`"""
input MapContributorInput {
  mapId: UUID!
  userId: UUID!
  contribution: String!
  rowId: UUID
}

"""
Represents an update to a `MapContributor`. Fields that are set will be updated.
"""
input MapContributorPatch {
  mapId: UUID
  userId: UUID
  contribution: String
  rowId: UUID
}

"""A connection to a list of `MapContributor` values."""
type MapContributorsConnection {
  """A list of `MapContributor` objects."""
  nodes: [MapContributor]!

  """
  A list of edges which contains the `MapContributor` and cursor to aid in pagination.
  """
  edges: [MapContributorsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MapContributor` you could get from the connection."""
  totalCount: Int!
}

"""A `MapContributor` edge in the connection."""
type MapContributorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MapContributor` at the end of the edge."""
  node: MapContributor
}

"""Methods to use when ordering `MapContributor`."""
enum MapContributorsOrderBy {
  NATURAL
  MAP_ID_ASC
  MAP_ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  CONTRIBUTION_ASC
  CONTRIBUTION_DESC
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type MapDescription implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  mapId: UUID!
  textMarkdownId: UUID!
  order: Int

  """Reads a single `Map` that is related to this `MapDescription`."""
  mapByMapId: Map

  """
  Reads a single `TextMarkdown` that is related to this `MapDescription`.
  """
  textMarkdownByTextMarkdownId: TextMarkdown
}

"""
A condition to be used against `MapDescription` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input MapDescriptionCondition {
  """Checks for equality with the object’s `mapId` field."""
  mapId: UUID

  """Checks for equality with the object’s `textMarkdownId` field."""
  textMarkdownId: UUID

  """Checks for equality with the object’s `order` field."""
  order: Int
}

"""An input for mutations affecting `MapDescription`"""
input MapDescriptionInput {
  mapId: UUID!
  textMarkdownId: UUID!
  order: Int
}

"""
Represents an update to a `MapDescription`. Fields that are set will be updated.
"""
input MapDescriptionPatch {
  mapId: UUID
  textMarkdownId: UUID
  order: Int
}

"""A connection to a list of `MapDescription` values."""
type MapDescriptionsConnection {
  """A list of `MapDescription` objects."""
  nodes: [MapDescription]!

  """
  A list of edges which contains the `MapDescription` and cursor to aid in pagination.
  """
  edges: [MapDescriptionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MapDescription` you could get from the connection."""
  totalCount: Int!
}

"""A `MapDescription` edge in the connection."""
type MapDescriptionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MapDescription` at the end of the edge."""
  node: MapDescription
}

"""Methods to use when ordering `MapDescription`."""
enum MapDescriptionsOrderBy {
  NATURAL
  MAP_ID_ASC
  MAP_ID_DESC
  TEXT_MARKDOWN_ID_ASC
  TEXT_MARKDOWN_ID_DESC
  ORDER_ASC
  ORDER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type MapFile implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  mapId: UUID!
  fileId: UUID!
  gameId: UUID!
  label: String!
  isPrimary: Boolean!

  """Reads a single `Map` that is related to this `MapFile`."""
  mapByMapId: Map

  """Reads a single `File` that is related to this `MapFile`."""
  fileByFileId: File

  """Reads a single `Game` that is related to this `MapFile`."""
  gameByGameId: Game
}

"""
A condition to be used against `MapFile` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MapFileCondition {
  """Checks for equality with the object’s `mapId` field."""
  mapId: UUID

  """Checks for equality with the object’s `fileId` field."""
  fileId: UUID

  """Checks for equality with the object’s `gameId` field."""
  gameId: UUID

  """Checks for equality with the object’s `label` field."""
  label: String

  """Checks for equality with the object’s `isPrimary` field."""
  isPrimary: Boolean
}

"""An input for mutations affecting `MapFile`"""
input MapFileInput {
  mapId: UUID!
  fileId: UUID!
  gameId: UUID!
  label: String!
  isPrimary: Boolean!
}

"""
Represents an update to a `MapFile`. Fields that are set will be updated.
"""
input MapFilePatch {
  mapId: UUID
  fileId: UUID
  gameId: UUID
  label: String
  isPrimary: Boolean
}

"""A connection to a list of `MapFile` values."""
type MapFilesConnection {
  """A list of `MapFile` objects."""
  nodes: [MapFile]!

  """
  A list of edges which contains the `MapFile` and cursor to aid in pagination.
  """
  edges: [MapFilesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MapFile` you could get from the connection."""
  totalCount: Int!
}

"""A `MapFile` edge in the connection."""
type MapFilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MapFile` at the end of the edge."""
  node: MapFile
}

"""Methods to use when ordering `MapFile`."""
enum MapFilesOrderBy {
  NATURAL
  MAP_ID_ASC
  MAP_ID_DESC
  FILE_ID_ASC
  FILE_ID_DESC
  GAME_ID_ASC
  GAME_ID_DESC
  LABEL_ASC
  LABEL_DESC
  IS_PRIMARY_ASC
  IS_PRIMARY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type MapImage implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  mapId: UUID!
  imageId: UUID!
  backgroundImage: Boolean
  primaryImage: Boolean
  order: Int!

  """Reads a single `Map` that is related to this `MapImage`."""
  mapByMapId: Map

  """Reads a single `Image` that is related to this `MapImage`."""
  imageByImageId: Image
}

"""
A condition to be used against `MapImage` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MapImageCondition {
  """Checks for equality with the object’s `mapId` field."""
  mapId: UUID

  """Checks for equality with the object’s `imageId` field."""
  imageId: UUID

  """Checks for equality with the object’s `backgroundImage` field."""
  backgroundImage: Boolean

  """Checks for equality with the object’s `primaryImage` field."""
  primaryImage: Boolean

  """Checks for equality with the object’s `order` field."""
  order: Int
}

"""An input for mutations affecting `MapImage`"""
input MapImageInput {
  mapId: UUID!
  imageId: UUID!
  backgroundImage: Boolean
  primaryImage: Boolean
  order: Int!
}

"""
Represents an update to a `MapImage`. Fields that are set will be updated.
"""
input MapImagePatch {
  mapId: UUID
  imageId: UUID
  backgroundImage: Boolean
  primaryImage: Boolean
  order: Int
}

"""A connection to a list of `MapImage` values."""
type MapImagesConnection {
  """A list of `MapImage` objects."""
  nodes: [MapImage]!

  """
  A list of edges which contains the `MapImage` and cursor to aid in pagination.
  """
  edges: [MapImagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MapImage` you could get from the connection."""
  totalCount: Int!
}

"""A `MapImage` edge in the connection."""
type MapImagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MapImage` at the end of the edge."""
  node: MapImage
}

"""Methods to use when ordering `MapImage`."""
enum MapImagesOrderBy {
  NATURAL
  MAP_ID_ASC
  MAP_ID_DESC
  IMAGE_ID_ASC
  IMAGE_ID_DESC
  BACKGROUND_IMAGE_ASC
  BACKGROUND_IMAGE_DESC
  PRIMARY_IMAGE_ASC
  PRIMARY_IMAGE_DESC
  ORDER_ASC
  ORDER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""An input for mutations affecting `Map`"""
input MapInput {
  rowId: UUID
  name: String!
  public: Boolean
  createdAt: Datetime
  updatedAt: Datetime
  gameModeId: UUID!
  gameId: UUID!
  mapTypeId: UUID!
  uploaderId: UUID!
  tier: Int!
  releasedAt: Datetime
}

"""Represents an update to a `Map`. Fields that are set will be updated."""
input MapPatch {
  rowId: UUID
  name: String
  public: Boolean
  createdAt: Datetime
  updatedAt: Datetime
  gameModeId: UUID
  gameId: UUID
  mapTypeId: UUID
  uploaderId: UUID
  tier: Int
  releasedAt: Datetime
}

"""A connection to a list of `Map` values."""
type MapsConnection {
  """A list of `Map` objects."""
  nodes: [Map]!

  """
  A list of edges which contains the `Map` and cursor to aid in pagination.
  """
  edges: [MapsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Map` you could get from the connection."""
  totalCount: Int!
}

"""A `Map` edge in the connection."""
type MapsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Map` at the end of the edge."""
  node: Map
}

"""Methods to use when ordering `Map`."""
enum MapsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  PUBLIC_ASC
  PUBLIC_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  GAME_MODE_ID_ASC
  GAME_MODE_ID_DESC
  GAME_ID_ASC
  GAME_ID_DESC
  MAP_TYPE_ID_ASC
  MAP_TYPE_ID_DESC
  UPLOADER_ID_ASC
  UPLOADER_ID_DESC
  TIER_ASC
  TIER_DESC
  RELEASED_AT_ASC
  RELEASED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type MapType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: UUID!
  name: String!

  """Reads and enables pagination through a set of `Map`."""
  mapsByMapTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Map`."""
    orderBy: [MapsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MapCondition
  ): MapsConnection!
}

"""
A condition to be used against `MapType` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MapTypeCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""An input for mutations affecting `MapType`"""
input MapTypeInput {
  rowId: UUID
  name: String!
}

"""
Represents an update to a `MapType`. Fields that are set will be updated.
"""
input MapTypePatch {
  rowId: UUID
  name: String
}

"""A connection to a list of `MapType` values."""
type MapTypesConnection {
  """A list of `MapType` objects."""
  nodes: [MapType]!

  """
  A list of edges which contains the `MapType` and cursor to aid in pagination.
  """
  edges: [MapTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MapType` you could get from the connection."""
  totalCount: Int!
}

"""A `MapType` edge in the connection."""
type MapTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MapType` at the end of the edge."""
  node: MapType
}

"""Methods to use when ordering `MapType`."""
enum MapTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `File`."""
  createFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFileInput!
  ): CreateFilePayload

  """Creates a single `FileType`."""
  createFileType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFileTypeInput!
  ): CreateFileTypePayload

  """Creates a single `Game`."""
  createGame(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGameInput!
  ): CreateGamePayload

  """Creates a single `GameMode`."""
  createGameMode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGameModeInput!
  ): CreateGameModePayload

  """Creates a single `Image`."""
  createImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateImageInput!
  ): CreateImagePayload

  """Creates a single `Map`."""
  createMap(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMapInput!
  ): CreateMapPayload

  """Creates a single `MapAuthor`."""
  createMapAuthor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMapAuthorInput!
  ): CreateMapAuthorPayload

  """Creates a single `MapContributor`."""
  createMapContributor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMapContributorInput!
  ): CreateMapContributorPayload

  """Creates a single `MapDescription`."""
  createMapDescription(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMapDescriptionInput!
  ): CreateMapDescriptionPayload

  """Creates a single `MapFile`."""
  createMapFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMapFileInput!
  ): CreateMapFilePayload

  """Creates a single `MapImage`."""
  createMapImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMapImageInput!
  ): CreateMapImagePayload

  """Creates a single `MapType`."""
  createMapType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMapTypeInput!
  ): CreateMapTypePayload

  """Creates a single `Stage`."""
  createStage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateStageInput!
  ): CreateStagePayload

  """Creates a single `StageImage`."""
  createStageImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateStageImageInput!
  ): CreateStageImagePayload

  """Creates a single `StageType`."""
  createStageType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateStageTypeInput!
  ): CreateStageTypePayload

  """Creates a single `TextMarkdown`."""
  createTextMarkdown(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTextMarkdownInput!
  ): CreateTextMarkdownPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Creates a single `UserSteamInfo`."""
  createUserSteamInfo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserSteamInfoInput!
  ): CreateUserSteamInfoPayload

  """Updates a single `File` using its globally unique id and a patch."""
  updateFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFileInput!
  ): UpdateFilePayload

  """Updates a single `File` using a unique key and a patch."""
  updateFileByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFileByRowIdInput!
  ): UpdateFilePayload

  """Updates a single `FileType` using its globally unique id and a patch."""
  updateFileType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFileTypeInput!
  ): UpdateFileTypePayload

  """Updates a single `FileType` using a unique key and a patch."""
  updateFileTypeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFileTypeByRowIdInput!
  ): UpdateFileTypePayload

  """Updates a single `Game` using its globally unique id and a patch."""
  updateGame(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGameInput!
  ): UpdateGamePayload

  """Updates a single `Game` using a unique key and a patch."""
  updateGameByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGameByRowIdInput!
  ): UpdateGamePayload

  """Updates a single `GameMode` using its globally unique id and a patch."""
  updateGameMode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGameModeInput!
  ): UpdateGameModePayload

  """Updates a single `GameMode` using a unique key and a patch."""
  updateGameModeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGameModeByRowIdInput!
  ): UpdateGameModePayload

  """Updates a single `Image` using its globally unique id and a patch."""
  updateImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateImageInput!
  ): UpdateImagePayload

  """Updates a single `Image` using a unique key and a patch."""
  updateImageByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateImageByRowIdInput!
  ): UpdateImagePayload

  """Updates a single `Map` using its globally unique id and a patch."""
  updateMap(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMapInput!
  ): UpdateMapPayload

  """Updates a single `Map` using a unique key and a patch."""
  updateMapByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMapByRowIdInput!
  ): UpdateMapPayload

  """Updates a single `Map` using a unique key and a patch."""
  updateMapByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMapByNameInput!
  ): UpdateMapPayload

  """Updates a single `MapAuthor` using its globally unique id and a patch."""
  updateMapAuthor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMapAuthorInput!
  ): UpdateMapAuthorPayload

  """Updates a single `MapAuthor` using a unique key and a patch."""
  updateMapAuthorByAuthorIdAndMapId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMapAuthorByAuthorIdAndMapIdInput!
  ): UpdateMapAuthorPayload

  """
  Updates a single `MapContributor` using its globally unique id and a patch.
  """
  updateMapContributor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMapContributorInput!
  ): UpdateMapContributorPayload

  """Updates a single `MapContributor` using a unique key and a patch."""
  updateMapContributorByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMapContributorByRowIdInput!
  ): UpdateMapContributorPayload

  """
  Updates a single `MapDescription` using its globally unique id and a patch.
  """
  updateMapDescription(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMapDescriptionInput!
  ): UpdateMapDescriptionPayload

  """Updates a single `MapDescription` using a unique key and a patch."""
  updateMapDescriptionByMapIdAndTextMarkdownId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMapDescriptionByMapIdAndTextMarkdownIdInput!
  ): UpdateMapDescriptionPayload

  """Updates a single `MapFile` using its globally unique id and a patch."""
  updateMapFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMapFileInput!
  ): UpdateMapFilePayload

  """Updates a single `MapFile` using a unique key and a patch."""
  updateMapFileByMapIdAndFileId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMapFileByMapIdAndFileIdInput!
  ): UpdateMapFilePayload

  """Updates a single `MapImage` using its globally unique id and a patch."""
  updateMapImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMapImageInput!
  ): UpdateMapImagePayload

  """Updates a single `MapImage` using a unique key and a patch."""
  updateMapImageByMapIdAndImageId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMapImageByMapIdAndImageIdInput!
  ): UpdateMapImagePayload

  """Updates a single `MapType` using its globally unique id and a patch."""
  updateMapType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMapTypeInput!
  ): UpdateMapTypePayload

  """Updates a single `MapType` using a unique key and a patch."""
  updateMapTypeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMapTypeByRowIdInput!
  ): UpdateMapTypePayload

  """Updates a single `Stage` using its globally unique id and a patch."""
  updateStage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStageInput!
  ): UpdateStagePayload

  """Updates a single `Stage` using a unique key and a patch."""
  updateStageByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStageByRowIdInput!
  ): UpdateStagePayload

  """
  Updates a single `StageImage` using its globally unique id and a patch.
  """
  updateStageImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStageImageInput!
  ): UpdateStageImagePayload

  """Updates a single `StageImage` using a unique key and a patch."""
  updateStageImageByStageIdAndImageId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStageImageByStageIdAndImageIdInput!
  ): UpdateStageImagePayload

  """Updates a single `StageType` using its globally unique id and a patch."""
  updateStageType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStageTypeInput!
  ): UpdateStageTypePayload

  """Updates a single `StageType` using a unique key and a patch."""
  updateStageTypeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStageTypeByRowIdInput!
  ): UpdateStageTypePayload

  """
  Updates a single `TextMarkdown` using its globally unique id and a patch.
  """
  updateTextMarkdown(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTextMarkdownInput!
  ): UpdateTextMarkdownPayload

  """Updates a single `TextMarkdown` using a unique key and a patch."""
  updateTextMarkdownByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTextMarkdownByRowIdInput!
  ): UpdateTextMarkdownPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByRowIdInput!
  ): UpdateUserPayload

  """
  Updates a single `UserSteamInfo` using its globally unique id and a patch.
  """
  updateUserSteamInfo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserSteamInfoInput!
  ): UpdateUserSteamInfoPayload

  """Updates a single `UserSteamInfo` using a unique key and a patch."""
  updateUserSteamInfoByUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserSteamInfoByUserIdInput!
  ): UpdateUserSteamInfoPayload

  """Deletes a single `File` using its globally unique id."""
  deleteFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFileInput!
  ): DeleteFilePayload

  """Deletes a single `File` using a unique key."""
  deleteFileByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFileByRowIdInput!
  ): DeleteFilePayload

  """Deletes a single `FileType` using its globally unique id."""
  deleteFileType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFileTypeInput!
  ): DeleteFileTypePayload

  """Deletes a single `FileType` using a unique key."""
  deleteFileTypeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFileTypeByRowIdInput!
  ): DeleteFileTypePayload

  """Deletes a single `Game` using its globally unique id."""
  deleteGame(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGameInput!
  ): DeleteGamePayload

  """Deletes a single `Game` using a unique key."""
  deleteGameByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGameByRowIdInput!
  ): DeleteGamePayload

  """Deletes a single `GameMode` using its globally unique id."""
  deleteGameMode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGameModeInput!
  ): DeleteGameModePayload

  """Deletes a single `GameMode` using a unique key."""
  deleteGameModeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGameModeByRowIdInput!
  ): DeleteGameModePayload

  """Deletes a single `Image` using its globally unique id."""
  deleteImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteImageInput!
  ): DeleteImagePayload

  """Deletes a single `Image` using a unique key."""
  deleteImageByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteImageByRowIdInput!
  ): DeleteImagePayload

  """Deletes a single `Map` using its globally unique id."""
  deleteMap(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMapInput!
  ): DeleteMapPayload

  """Deletes a single `Map` using a unique key."""
  deleteMapByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMapByRowIdInput!
  ): DeleteMapPayload

  """Deletes a single `Map` using a unique key."""
  deleteMapByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMapByNameInput!
  ): DeleteMapPayload

  """Deletes a single `MapAuthor` using its globally unique id."""
  deleteMapAuthor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMapAuthorInput!
  ): DeleteMapAuthorPayload

  """Deletes a single `MapAuthor` using a unique key."""
  deleteMapAuthorByAuthorIdAndMapId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMapAuthorByAuthorIdAndMapIdInput!
  ): DeleteMapAuthorPayload

  """Deletes a single `MapContributor` using its globally unique id."""
  deleteMapContributor(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMapContributorInput!
  ): DeleteMapContributorPayload

  """Deletes a single `MapContributor` using a unique key."""
  deleteMapContributorByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMapContributorByRowIdInput!
  ): DeleteMapContributorPayload

  """Deletes a single `MapDescription` using its globally unique id."""
  deleteMapDescription(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMapDescriptionInput!
  ): DeleteMapDescriptionPayload

  """Deletes a single `MapDescription` using a unique key."""
  deleteMapDescriptionByMapIdAndTextMarkdownId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMapDescriptionByMapIdAndTextMarkdownIdInput!
  ): DeleteMapDescriptionPayload

  """Deletes a single `MapFile` using its globally unique id."""
  deleteMapFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMapFileInput!
  ): DeleteMapFilePayload

  """Deletes a single `MapFile` using a unique key."""
  deleteMapFileByMapIdAndFileId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMapFileByMapIdAndFileIdInput!
  ): DeleteMapFilePayload

  """Deletes a single `MapImage` using its globally unique id."""
  deleteMapImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMapImageInput!
  ): DeleteMapImagePayload

  """Deletes a single `MapImage` using a unique key."""
  deleteMapImageByMapIdAndImageId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMapImageByMapIdAndImageIdInput!
  ): DeleteMapImagePayload

  """Deletes a single `MapType` using its globally unique id."""
  deleteMapType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMapTypeInput!
  ): DeleteMapTypePayload

  """Deletes a single `MapType` using a unique key."""
  deleteMapTypeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMapTypeByRowIdInput!
  ): DeleteMapTypePayload

  """Deletes a single `Stage` using its globally unique id."""
  deleteStage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStageInput!
  ): DeleteStagePayload

  """Deletes a single `Stage` using a unique key."""
  deleteStageByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStageByRowIdInput!
  ): DeleteStagePayload

  """Deletes a single `StageImage` using its globally unique id."""
  deleteStageImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStageImageInput!
  ): DeleteStageImagePayload

  """Deletes a single `StageImage` using a unique key."""
  deleteStageImageByStageIdAndImageId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStageImageByStageIdAndImageIdInput!
  ): DeleteStageImagePayload

  """Deletes a single `StageType` using its globally unique id."""
  deleteStageType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStageTypeInput!
  ): DeleteStageTypePayload

  """Deletes a single `StageType` using a unique key."""
  deleteStageTypeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStageTypeByRowIdInput!
  ): DeleteStageTypePayload

  """Deletes a single `TextMarkdown` using its globally unique id."""
  deleteTextMarkdown(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTextMarkdownInput!
  ): DeleteTextMarkdownPayload

  """Deletes a single `TextMarkdown` using a unique key."""
  deleteTextMarkdownByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTextMarkdownByRowIdInput!
  ): DeleteTextMarkdownPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByRowIdInput!
  ): DeleteUserPayload

  """Deletes a single `UserSteamInfo` using its globally unique id."""
  deleteUserSteamInfo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserSteamInfoInput!
  ): DeleteUserSteamInfoPayload

  """Deletes a single `UserSteamInfo` using a unique key."""
  deleteUserSteamInfoByUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserSteamInfoByUserIdInput!
  ): DeleteUserSteamInfoPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """Reads and enables pagination through a set of `File`."""
  allFiles(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition
  ): FilesConnection

  """Reads and enables pagination through a set of `FileType`."""
  allFileTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FileType`."""
    orderBy: [FileTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileTypeCondition
  ): FileTypesConnection

  """Reads and enables pagination through a set of `Game`."""
  allGames(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Game`."""
    orderBy: [GamesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GameCondition
  ): GamesConnection

  """Reads and enables pagination through a set of `GameMode`."""
  allGameModes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GameMode`."""
    orderBy: [GameModesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GameModeCondition
  ): GameModesConnection

  """Reads and enables pagination through a set of `Image`."""
  allImages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImageCondition
  ): ImagesConnection

  """Reads and enables pagination through a set of `Map`."""
  allMaps(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Map`."""
    orderBy: [MapsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MapCondition
  ): MapsConnection

  """Reads and enables pagination through a set of `MapAuthor`."""
  allMapAuthors(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MapAuthor`."""
    orderBy: [MapAuthorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MapAuthorCondition
  ): MapAuthorsConnection

  """Reads and enables pagination through a set of `MapContributor`."""
  allMapContributors(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MapContributor`."""
    orderBy: [MapContributorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MapContributorCondition
  ): MapContributorsConnection

  """Reads and enables pagination through a set of `MapDescription`."""
  allMapDescriptions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MapDescription`."""
    orderBy: [MapDescriptionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MapDescriptionCondition
  ): MapDescriptionsConnection

  """Reads and enables pagination through a set of `MapFile`."""
  allMapFiles(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MapFile`."""
    orderBy: [MapFilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MapFileCondition
  ): MapFilesConnection

  """Reads and enables pagination through a set of `MapImage`."""
  allMapImages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MapImage`."""
    orderBy: [MapImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MapImageCondition
  ): MapImagesConnection

  """Reads and enables pagination through a set of `MapType`."""
  allMapTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MapType`."""
    orderBy: [MapTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MapTypeCondition
  ): MapTypesConnection

  """Reads and enables pagination through a set of `Stage`."""
  allStages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Stage`."""
    orderBy: [StagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StageCondition
  ): StagesConnection

  """Reads and enables pagination through a set of `StageImage`."""
  allStageImages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StageImage`."""
    orderBy: [StageImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StageImageCondition
  ): StageImagesConnection

  """Reads and enables pagination through a set of `StageType`."""
  allStageTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StageType`."""
    orderBy: [StageTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StageTypeCondition
  ): StageTypesConnection

  """Reads and enables pagination through a set of `TextMarkdown`."""
  allTextMarkdowns(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TextMarkdown`."""
    orderBy: [TextMarkdownsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TextMarkdownCondition
  ): TextMarkdownsConnection

  """Reads and enables pagination through a set of `User`."""
  allUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): UsersConnection

  """Reads and enables pagination through a set of `UserSteamInfo`."""
  allUserSteamInfos(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserSteamInfo`."""
    orderBy: [UserSteamInfosOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserSteamInfoCondition
  ): UserSteamInfosConnection
  fileByRowId(rowId: UUID!): File
  fileTypeByRowId(rowId: UUID!): FileType
  gameByRowId(rowId: UUID!): Game
  gameModeByRowId(rowId: UUID!): GameMode
  imageByRowId(rowId: UUID!): Image
  mapByRowId(rowId: UUID!): Map
  mapByName(name: String!): Map
  mapAuthorByAuthorIdAndMapId(authorId: UUID!, mapId: UUID!): MapAuthor
  mapContributorByRowId(rowId: UUID!): MapContributor
  mapDescriptionByMapIdAndTextMarkdownId(mapId: UUID!, textMarkdownId: UUID!): MapDescription
  mapFileByMapIdAndFileId(mapId: UUID!, fileId: UUID!): MapFile
  mapImageByMapIdAndImageId(mapId: UUID!, imageId: UUID!): MapImage
  mapTypeByRowId(rowId: UUID!): MapType
  stageByRowId(rowId: UUID!): Stage
  stageImageByStageIdAndImageId(stageId: UUID!, imageId: UUID!): StageImage
  stageTypeByRowId(rowId: UUID!): StageType
  textMarkdownByRowId(rowId: UUID!): TextMarkdown
  userByRowId(rowId: UUID!): User
  userSteamInfoByUserId(userId: UUID!): UserSteamInfo
  currentUserSteamInfo: UserSteamInfo
  currentUserId: UUID

  """Reads and enables pagination through a set of `UserSteamInfo`."""
  searchSteamUsers(
    search: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): UserSteamInfosConnection!

  """Reads a single `File` using its globally unique `ID`."""
  file(
    """The globally unique `ID` to be used in selecting a single `File`."""
    id: ID!
  ): File

  """Reads a single `FileType` using its globally unique `ID`."""
  fileType(
    """The globally unique `ID` to be used in selecting a single `FileType`."""
    id: ID!
  ): FileType

  """Reads a single `Game` using its globally unique `ID`."""
  game(
    """The globally unique `ID` to be used in selecting a single `Game`."""
    id: ID!
  ): Game

  """Reads a single `GameMode` using its globally unique `ID`."""
  gameMode(
    """The globally unique `ID` to be used in selecting a single `GameMode`."""
    id: ID!
  ): GameMode

  """Reads a single `Image` using its globally unique `ID`."""
  image(
    """The globally unique `ID` to be used in selecting a single `Image`."""
    id: ID!
  ): Image

  """Reads a single `Map` using its globally unique `ID`."""
  map(
    """The globally unique `ID` to be used in selecting a single `Map`."""
    id: ID!
  ): Map

  """Reads a single `MapAuthor` using its globally unique `ID`."""
  mapAuthor(
    """The globally unique `ID` to be used in selecting a single `MapAuthor`."""
    id: ID!
  ): MapAuthor

  """Reads a single `MapContributor` using its globally unique `ID`."""
  mapContributor(
    """
    The globally unique `ID` to be used in selecting a single `MapContributor`.
    """
    id: ID!
  ): MapContributor

  """Reads a single `MapDescription` using its globally unique `ID`."""
  mapDescription(
    """
    The globally unique `ID` to be used in selecting a single `MapDescription`.
    """
    id: ID!
  ): MapDescription

  """Reads a single `MapFile` using its globally unique `ID`."""
  mapFile(
    """The globally unique `ID` to be used in selecting a single `MapFile`."""
    id: ID!
  ): MapFile

  """Reads a single `MapImage` using its globally unique `ID`."""
  mapImage(
    """The globally unique `ID` to be used in selecting a single `MapImage`."""
    id: ID!
  ): MapImage

  """Reads a single `MapType` using its globally unique `ID`."""
  mapType(
    """The globally unique `ID` to be used in selecting a single `MapType`."""
    id: ID!
  ): MapType

  """Reads a single `Stage` using its globally unique `ID`."""
  stage(
    """The globally unique `ID` to be used in selecting a single `Stage`."""
    id: ID!
  ): Stage

  """Reads a single `StageImage` using its globally unique `ID`."""
  stageImage(
    """
    The globally unique `ID` to be used in selecting a single `StageImage`.
    """
    id: ID!
  ): StageImage

  """Reads a single `StageType` using its globally unique `ID`."""
  stageType(
    """The globally unique `ID` to be used in selecting a single `StageType`."""
    id: ID!
  ): StageType

  """Reads a single `TextMarkdown` using its globally unique `ID`."""
  textMarkdown(
    """
    The globally unique `ID` to be used in selecting a single `TextMarkdown`.
    """
    id: ID!
  ): TextMarkdown

  """Reads a single `User` using its globally unique `ID`."""
  user(
    """The globally unique `ID` to be used in selecting a single `User`."""
    id: ID!
  ): User

  """Reads a single `UserSteamInfo` using its globally unique `ID`."""
  userSteamInfo(
    """
    The globally unique `ID` to be used in selecting a single `UserSteamInfo`.
    """
    id: ID!
  ): UserSteamInfo
}

type Stage implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: UUID!
  name: String
  number: Int
  mapId: UUID!
  stageTypeId: UUID!
  authorId: UUID

  """Reads a single `Map` that is related to this `Stage`."""
  mapByMapId: Map

  """Reads a single `StageType` that is related to this `Stage`."""
  stageTypeByStageTypeId: StageType

  """Reads a single `User` that is related to this `Stage`."""
  userByAuthorId: User

  """Reads and enables pagination through a set of `StageImage`."""
  stageImagesByStageId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StageImage`."""
    orderBy: [StageImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StageImageCondition
  ): StageImagesConnection!
}

"""
A condition to be used against `Stage` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input StageCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `number` field."""
  number: Int

  """Checks for equality with the object’s `mapId` field."""
  mapId: UUID

  """Checks for equality with the object’s `stageTypeId` field."""
  stageTypeId: UUID

  """Checks for equality with the object’s `authorId` field."""
  authorId: UUID
}

type StageImage implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  stageId: UUID!
  imageId: UUID!

  """Reads a single `Stage` that is related to this `StageImage`."""
  stageByStageId: Stage

  """Reads a single `Image` that is related to this `StageImage`."""
  imageByImageId: Image
}

"""
A condition to be used against `StageImage` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input StageImageCondition {
  """Checks for equality with the object’s `stageId` field."""
  stageId: UUID

  """Checks for equality with the object’s `imageId` field."""
  imageId: UUID
}

"""An input for mutations affecting `StageImage`"""
input StageImageInput {
  stageId: UUID!
  imageId: UUID!
}

"""
Represents an update to a `StageImage`. Fields that are set will be updated.
"""
input StageImagePatch {
  stageId: UUID
  imageId: UUID
}

"""A connection to a list of `StageImage` values."""
type StageImagesConnection {
  """A list of `StageImage` objects."""
  nodes: [StageImage]!

  """
  A list of edges which contains the `StageImage` and cursor to aid in pagination.
  """
  edges: [StageImagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `StageImage` you could get from the connection."""
  totalCount: Int!
}

"""A `StageImage` edge in the connection."""
type StageImagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `StageImage` at the end of the edge."""
  node: StageImage
}

"""Methods to use when ordering `StageImage`."""
enum StageImagesOrderBy {
  NATURAL
  STAGE_ID_ASC
  STAGE_ID_DESC
  IMAGE_ID_ASC
  IMAGE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""An input for mutations affecting `Stage`"""
input StageInput {
  rowId: UUID
  name: String
  number: Int
  mapId: UUID!
  stageTypeId: UUID!
  authorId: UUID
}

"""
Represents an update to a `Stage`. Fields that are set will be updated.
"""
input StagePatch {
  rowId: UUID
  name: String
  number: Int
  mapId: UUID
  stageTypeId: UUID
  authorId: UUID
}

"""A connection to a list of `Stage` values."""
type StagesConnection {
  """A list of `Stage` objects."""
  nodes: [Stage]!

  """
  A list of edges which contains the `Stage` and cursor to aid in pagination.
  """
  edges: [StagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Stage` you could get from the connection."""
  totalCount: Int!
}

"""A `Stage` edge in the connection."""
type StagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Stage` at the end of the edge."""
  node: Stage
}

"""Methods to use when ordering `Stage`."""
enum StagesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NUMBER_ASC
  NUMBER_DESC
  MAP_ID_ASC
  MAP_ID_DESC
  STAGE_TYPE_ID_ASC
  STAGE_TYPE_ID_DESC
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type StageType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: UUID!
  name: String!

  """Reads and enables pagination through a set of `Stage`."""
  stagesByStageTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Stage`."""
    orderBy: [StagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StageCondition
  ): StagesConnection!
}

"""
A condition to be used against `StageType` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input StageTypeCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""An input for mutations affecting `StageType`"""
input StageTypeInput {
  rowId: UUID
  name: String!
}

"""
Represents an update to a `StageType`. Fields that are set will be updated.
"""
input StageTypePatch {
  rowId: UUID
  name: String
}

"""A connection to a list of `StageType` values."""
type StageTypesConnection {
  """A list of `StageType` objects."""
  nodes: [StageType]!

  """
  A list of edges which contains the `StageType` and cursor to aid in pagination.
  """
  edges: [StageTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `StageType` you could get from the connection."""
  totalCount: Int!
}

"""A `StageType` edge in the connection."""
type StageTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `StageType` at the end of the edge."""
  node: StageType
}

"""Methods to use when ordering `StageType`."""
enum StageTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type TextMarkdown implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: UUID!
  text: String!
  createdAt: Time!
  updatedAt: Datetime!
  authorId: UUID

  """Reads a single `User` that is related to this `TextMarkdown`."""
  userByAuthorId: User

  """Reads and enables pagination through a set of `MapDescription`."""
  mapDescriptionsByTextMarkdownId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MapDescription`."""
    orderBy: [MapDescriptionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MapDescriptionCondition
  ): MapDescriptionsConnection!
}

"""
A condition to be used against `TextMarkdown` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TextMarkdownCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID

  """Checks for equality with the object’s `text` field."""
  text: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Time

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `authorId` field."""
  authorId: UUID
}

"""An input for mutations affecting `TextMarkdown`"""
input TextMarkdownInput {
  rowId: UUID
  text: String!
  createdAt: Time
  updatedAt: Datetime
  authorId: UUID
}

"""
Represents an update to a `TextMarkdown`. Fields that are set will be updated.
"""
input TextMarkdownPatch {
  rowId: UUID
  text: String
  createdAt: Time
  updatedAt: Datetime
  authorId: UUID
}

"""A connection to a list of `TextMarkdown` values."""
type TextMarkdownsConnection {
  """A list of `TextMarkdown` objects."""
  nodes: [TextMarkdown]!

  """
  A list of edges which contains the `TextMarkdown` and cursor to aid in pagination.
  """
  edges: [TextMarkdownsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TextMarkdown` you could get from the connection."""
  totalCount: Int!
}

"""A `TextMarkdown` edge in the connection."""
type TextMarkdownsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TextMarkdown` at the end of the edge."""
  node: TextMarkdown
}

"""Methods to use when ordering `TextMarkdown`."""
enum TextMarkdownsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TEXT_ASC
  TEXT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The exact time of day, does not include the date. May or may not have a timezone offset.
"""
scalar Time

"""All input for the `updateFileByRowId` mutation."""
input UpdateFileByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `File` being updated.
  """
  filePatch: FilePatch!
  rowId: UUID!
}

"""All input for the `updateFile` mutation."""
input UpdateFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `File` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `File` being updated.
  """
  filePatch: FilePatch!
}

"""The output of our update `File` mutation."""
type UpdateFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `File` that was updated by this mutation."""
  file: File

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `File`."""
  userByUploaderId: User

  """Reads a single `FileType` that is related to this `File`."""
  fileTypeByFileTypeId: FileType

  """An edge for our `File`. May be used by Relay 1."""
  fileEdge(
    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = PRIMARY_KEY_ASC
  ): FilesEdge
}

"""All input for the `updateFileTypeByRowId` mutation."""
input UpdateFileTypeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FileType` being updated.
  """
  fileTypePatch: FileTypePatch!
  rowId: UUID!
}

"""All input for the `updateFileType` mutation."""
input UpdateFileTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FileType` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `FileType` being updated.
  """
  fileTypePatch: FileTypePatch!
}

"""The output of our update `FileType` mutation."""
type UpdateFileTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FileType` that was updated by this mutation."""
  fileType: FileType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FileType`. May be used by Relay 1."""
  fileTypeEdge(
    """The method to use when ordering `FileType`."""
    orderBy: [FileTypesOrderBy!] = PRIMARY_KEY_ASC
  ): FileTypesEdge
}

"""All input for the `updateGameByRowId` mutation."""
input UpdateGameByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Game` being updated.
  """
  gamePatch: GamePatch!
  rowId: UUID!
}

"""All input for the `updateGame` mutation."""
input UpdateGameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Game` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Game` being updated.
  """
  gamePatch: GamePatch!
}

"""All input for the `updateGameModeByRowId` mutation."""
input UpdateGameModeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GameMode` being updated.
  """
  gameModePatch: GameModePatch!
  rowId: UUID!
}

"""All input for the `updateGameMode` mutation."""
input UpdateGameModeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GameMode` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `GameMode` being updated.
  """
  gameModePatch: GameModePatch!
}

"""The output of our update `GameMode` mutation."""
type UpdateGameModePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GameMode` that was updated by this mutation."""
  gameMode: GameMode

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `GameMode`. May be used by Relay 1."""
  gameModeEdge(
    """The method to use when ordering `GameMode`."""
    orderBy: [GameModesOrderBy!] = PRIMARY_KEY_ASC
  ): GameModesEdge
}

"""The output of our update `Game` mutation."""
type UpdateGamePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Game` that was updated by this mutation."""
  game: Game

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Game`. May be used by Relay 1."""
  gameEdge(
    """The method to use when ordering `Game`."""
    orderBy: [GamesOrderBy!] = PRIMARY_KEY_ASC
  ): GamesEdge
}

"""All input for the `updateImageByRowId` mutation."""
input UpdateImageByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Image` being updated.
  """
  imagePatch: ImagePatch!
  rowId: UUID!
}

"""All input for the `updateImage` mutation."""
input UpdateImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Image` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Image` being updated.
  """
  imagePatch: ImagePatch!
}

"""The output of our update `Image` mutation."""
type UpdateImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Image` that was updated by this mutation."""
  image: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Image`."""
  userByUploaderId: User

  """An edge for our `Image`. May be used by Relay 1."""
  imageEdge(
    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = PRIMARY_KEY_ASC
  ): ImagesEdge
}

"""All input for the `updateMapAuthorByAuthorIdAndMapId` mutation."""
input UpdateMapAuthorByAuthorIdAndMapIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MapAuthor` being updated.
  """
  mapAuthorPatch: MapAuthorPatch!
  authorId: UUID!
  mapId: UUID!
}

"""All input for the `updateMapAuthor` mutation."""
input UpdateMapAuthorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MapAuthor` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `MapAuthor` being updated.
  """
  mapAuthorPatch: MapAuthorPatch!
}

"""The output of our update `MapAuthor` mutation."""
type UpdateMapAuthorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MapAuthor` that was updated by this mutation."""
  mapAuthor: MapAuthor

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `MapAuthor`."""
  userByAuthorId: User

  """Reads a single `Map` that is related to this `MapAuthor`."""
  mapByMapId: Map

  """An edge for our `MapAuthor`. May be used by Relay 1."""
  mapAuthorEdge(
    """The method to use when ordering `MapAuthor`."""
    orderBy: [MapAuthorsOrderBy!] = PRIMARY_KEY_ASC
  ): MapAuthorsEdge
}

"""All input for the `updateMapByName` mutation."""
input UpdateMapByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Map` being updated.
  """
  mapPatch: MapPatch!
  name: String!
}

"""All input for the `updateMapByRowId` mutation."""
input UpdateMapByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Map` being updated.
  """
  mapPatch: MapPatch!
  rowId: UUID!
}

"""All input for the `updateMapContributorByRowId` mutation."""
input UpdateMapContributorByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MapContributor` being updated.
  """
  mapContributorPatch: MapContributorPatch!
  rowId: UUID!
}

"""All input for the `updateMapContributor` mutation."""
input UpdateMapContributorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MapContributor` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `MapContributor` being updated.
  """
  mapContributorPatch: MapContributorPatch!
}

"""The output of our update `MapContributor` mutation."""
type UpdateMapContributorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MapContributor` that was updated by this mutation."""
  mapContributor: MapContributor

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Map` that is related to this `MapContributor`."""
  mapByMapId: Map

  """Reads a single `User` that is related to this `MapContributor`."""
  userByUserId: User

  """An edge for our `MapContributor`. May be used by Relay 1."""
  mapContributorEdge(
    """The method to use when ordering `MapContributor`."""
    orderBy: [MapContributorsOrderBy!] = PRIMARY_KEY_ASC
  ): MapContributorsEdge
}

"""
All input for the `updateMapDescriptionByMapIdAndTextMarkdownId` mutation.
"""
input UpdateMapDescriptionByMapIdAndTextMarkdownIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MapDescription` being updated.
  """
  mapDescriptionPatch: MapDescriptionPatch!
  mapId: UUID!
  textMarkdownId: UUID!
}

"""All input for the `updateMapDescription` mutation."""
input UpdateMapDescriptionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MapDescription` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `MapDescription` being updated.
  """
  mapDescriptionPatch: MapDescriptionPatch!
}

"""The output of our update `MapDescription` mutation."""
type UpdateMapDescriptionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MapDescription` that was updated by this mutation."""
  mapDescription: MapDescription

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Map` that is related to this `MapDescription`."""
  mapByMapId: Map

  """
  Reads a single `TextMarkdown` that is related to this `MapDescription`.
  """
  textMarkdownByTextMarkdownId: TextMarkdown

  """An edge for our `MapDescription`. May be used by Relay 1."""
  mapDescriptionEdge(
    """The method to use when ordering `MapDescription`."""
    orderBy: [MapDescriptionsOrderBy!] = PRIMARY_KEY_ASC
  ): MapDescriptionsEdge
}

"""All input for the `updateMapFileByMapIdAndFileId` mutation."""
input UpdateMapFileByMapIdAndFileIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MapFile` being updated.
  """
  mapFilePatch: MapFilePatch!
  mapId: UUID!
  fileId: UUID!
}

"""All input for the `updateMapFile` mutation."""
input UpdateMapFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MapFile` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `MapFile` being updated.
  """
  mapFilePatch: MapFilePatch!
}

"""The output of our update `MapFile` mutation."""
type UpdateMapFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MapFile` that was updated by this mutation."""
  mapFile: MapFile

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Map` that is related to this `MapFile`."""
  mapByMapId: Map

  """Reads a single `File` that is related to this `MapFile`."""
  fileByFileId: File

  """Reads a single `Game` that is related to this `MapFile`."""
  gameByGameId: Game

  """An edge for our `MapFile`. May be used by Relay 1."""
  mapFileEdge(
    """The method to use when ordering `MapFile`."""
    orderBy: [MapFilesOrderBy!] = PRIMARY_KEY_ASC
  ): MapFilesEdge
}

"""All input for the `updateMapImageByMapIdAndImageId` mutation."""
input UpdateMapImageByMapIdAndImageIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MapImage` being updated.
  """
  mapImagePatch: MapImagePatch!
  mapId: UUID!
  imageId: UUID!
}

"""All input for the `updateMapImage` mutation."""
input UpdateMapImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MapImage` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `MapImage` being updated.
  """
  mapImagePatch: MapImagePatch!
}

"""The output of our update `MapImage` mutation."""
type UpdateMapImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MapImage` that was updated by this mutation."""
  mapImage: MapImage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Map` that is related to this `MapImage`."""
  mapByMapId: Map

  """Reads a single `Image` that is related to this `MapImage`."""
  imageByImageId: Image

  """An edge for our `MapImage`. May be used by Relay 1."""
  mapImageEdge(
    """The method to use when ordering `MapImage`."""
    orderBy: [MapImagesOrderBy!] = PRIMARY_KEY_ASC
  ): MapImagesEdge
}

"""All input for the `updateMap` mutation."""
input UpdateMapInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Map` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Map` being updated.
  """
  mapPatch: MapPatch!
}

"""The output of our update `Map` mutation."""
type UpdateMapPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Map` that was updated by this mutation."""
  map: Map

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `GameMode` that is related to this `Map`."""
  gameModeByGameModeId: GameMode

  """Reads a single `Game` that is related to this `Map`."""
  gameByGameId: Game

  """Reads a single `MapType` that is related to this `Map`."""
  mapTypeByMapTypeId: MapType

  """Reads a single `User` that is related to this `Map`."""
  userByUploaderId: User

  """An edge for our `Map`. May be used by Relay 1."""
  mapEdge(
    """The method to use when ordering `Map`."""
    orderBy: [MapsOrderBy!] = PRIMARY_KEY_ASC
  ): MapsEdge
}

"""All input for the `updateMapTypeByRowId` mutation."""
input UpdateMapTypeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MapType` being updated.
  """
  mapTypePatch: MapTypePatch!
  rowId: UUID!
}

"""All input for the `updateMapType` mutation."""
input UpdateMapTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MapType` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `MapType` being updated.
  """
  mapTypePatch: MapTypePatch!
}

"""The output of our update `MapType` mutation."""
type UpdateMapTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MapType` that was updated by this mutation."""
  mapType: MapType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MapType`. May be used by Relay 1."""
  mapTypeEdge(
    """The method to use when ordering `MapType`."""
    orderBy: [MapTypesOrderBy!] = PRIMARY_KEY_ASC
  ): MapTypesEdge
}

"""All input for the `updateStageByRowId` mutation."""
input UpdateStageByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Stage` being updated.
  """
  stagePatch: StagePatch!
  rowId: UUID!
}

"""All input for the `updateStageImageByStageIdAndImageId` mutation."""
input UpdateStageImageByStageIdAndImageIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `StageImage` being updated.
  """
  stageImagePatch: StageImagePatch!
  stageId: UUID!
  imageId: UUID!
}

"""All input for the `updateStageImage` mutation."""
input UpdateStageImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `StageImage` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `StageImage` being updated.
  """
  stageImagePatch: StageImagePatch!
}

"""The output of our update `StageImage` mutation."""
type UpdateStageImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StageImage` that was updated by this mutation."""
  stageImage: StageImage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Stage` that is related to this `StageImage`."""
  stageByStageId: Stage

  """Reads a single `Image` that is related to this `StageImage`."""
  imageByImageId: Image

  """An edge for our `StageImage`. May be used by Relay 1."""
  stageImageEdge(
    """The method to use when ordering `StageImage`."""
    orderBy: [StageImagesOrderBy!] = PRIMARY_KEY_ASC
  ): StageImagesEdge
}

"""All input for the `updateStage` mutation."""
input UpdateStageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Stage` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Stage` being updated.
  """
  stagePatch: StagePatch!
}

"""The output of our update `Stage` mutation."""
type UpdateStagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Stage` that was updated by this mutation."""
  stage: Stage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Map` that is related to this `Stage`."""
  mapByMapId: Map

  """Reads a single `StageType` that is related to this `Stage`."""
  stageTypeByStageTypeId: StageType

  """Reads a single `User` that is related to this `Stage`."""
  userByAuthorId: User

  """An edge for our `Stage`. May be used by Relay 1."""
  stageEdge(
    """The method to use when ordering `Stage`."""
    orderBy: [StagesOrderBy!] = PRIMARY_KEY_ASC
  ): StagesEdge
}

"""All input for the `updateStageTypeByRowId` mutation."""
input UpdateStageTypeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `StageType` being updated.
  """
  stageTypePatch: StageTypePatch!
  rowId: UUID!
}

"""All input for the `updateStageType` mutation."""
input UpdateStageTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `StageType` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `StageType` being updated.
  """
  stageTypePatch: StageTypePatch!
}

"""The output of our update `StageType` mutation."""
type UpdateStageTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StageType` that was updated by this mutation."""
  stageType: StageType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `StageType`. May be used by Relay 1."""
  stageTypeEdge(
    """The method to use when ordering `StageType`."""
    orderBy: [StageTypesOrderBy!] = PRIMARY_KEY_ASC
  ): StageTypesEdge
}

"""All input for the `updateTextMarkdownByRowId` mutation."""
input UpdateTextMarkdownByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TextMarkdown` being updated.
  """
  textMarkdownPatch: TextMarkdownPatch!
  rowId: UUID!
}

"""All input for the `updateTextMarkdown` mutation."""
input UpdateTextMarkdownInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TextMarkdown` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `TextMarkdown` being updated.
  """
  textMarkdownPatch: TextMarkdownPatch!
}

"""The output of our update `TextMarkdown` mutation."""
type UpdateTextMarkdownPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TextMarkdown` that was updated by this mutation."""
  textMarkdown: TextMarkdown

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `TextMarkdown`."""
  userByAuthorId: User

  """An edge for our `TextMarkdown`. May be used by Relay 1."""
  textMarkdownEdge(
    """The method to use when ordering `TextMarkdown`."""
    orderBy: [TextMarkdownsOrderBy!] = PRIMARY_KEY_ASC
  ): TextMarkdownsEdge
}

"""All input for the `updateUserByRowId` mutation."""
input UpdateUserByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
  rowId: UUID!
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = PRIMARY_KEY_ASC
  ): UsersEdge
}

"""All input for the `updateUserSteamInfoByUserId` mutation."""
input UpdateUserSteamInfoByUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserSteamInfo` being updated.
  """
  userSteamInfoPatch: UserSteamInfoPatch!
  userId: UUID!
}

"""All input for the `updateUserSteamInfo` mutation."""
input UpdateUserSteamInfoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserSteamInfo` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `UserSteamInfo` being updated.
  """
  userSteamInfoPatch: UserSteamInfoPatch!
}

"""The output of our update `UserSteamInfo` mutation."""
type UpdateUserSteamInfoPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserSteamInfo` that was updated by this mutation."""
  userSteamInfo: UserSteamInfo

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserSteamInfo`."""
  userByUserId: User

  """An edge for our `UserSteamInfo`. May be used by Relay 1."""
  userSteamInfoEdge(
    """The method to use when ordering `UserSteamInfo`."""
    orderBy: [UserSteamInfosOrderBy!] = PRIMARY_KEY_ASC
  ): UserSteamInfosEdge
}

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: UUID!
  role: String!
  createdAt: Datetime!
  updatedAt: Datetime!

  """Reads a single `UserSteamInfo` that is related to this `User`."""
  userSteamInfoByUserId: UserSteamInfo

  """Reads and enables pagination through a set of `UserSteamInfo`."""
  userSteamInfosByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserSteamInfo`."""
    orderBy: [UserSteamInfosOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserSteamInfoCondition
  ): UserSteamInfosConnection! @deprecated(reason: "Please use userSteamInfoByUserId instead")

  """Reads and enables pagination through a set of `Map`."""
  mapsByUploaderId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Map`."""
    orderBy: [MapsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MapCondition
  ): MapsConnection!

  """Reads and enables pagination through a set of `Stage`."""
  stagesByAuthorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Stage`."""
    orderBy: [StagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StageCondition
  ): StagesConnection!

  """Reads and enables pagination through a set of `TextMarkdown`."""
  textMarkdownsByAuthorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TextMarkdown`."""
    orderBy: [TextMarkdownsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TextMarkdownCondition
  ): TextMarkdownsConnection!

  """Reads and enables pagination through a set of `Image`."""
  imagesByUploaderId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImageCondition
  ): ImagesConnection!

  """Reads and enables pagination through a set of `MapAuthor`."""
  mapAuthorsByAuthorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MapAuthor`."""
    orderBy: [MapAuthorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MapAuthorCondition
  ): MapAuthorsConnection!

  """Reads and enables pagination through a set of `File`."""
  filesByUploaderId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition
  ): FilesConnection!

  """Reads and enables pagination through a set of `MapContributor`."""
  mapContributorsByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MapContributor`."""
    orderBy: [MapContributorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MapContributorCondition
  ): MapContributorsConnection!
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID

  """Checks for equality with the object’s `role` field."""
  role: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `User`"""
input UserInput {
  rowId: UUID
  role: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  rowId: UUID
  role: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ROLE_ASC
  ROLE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type UserSteamInfo implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  name: String!
  profileUrl: String!
  avatar: String!
  avatarMedium: String!
  avatarFull: String!
  userId: UUID!
  numericSteamId: String!
  timeCreated: String!
  createdAt: Datetime!
  updatedAt: Time!

  """Reads a single `User` that is related to this `UserSteamInfo`."""
  userByUserId: User
}

"""
A condition to be used against `UserSteamInfo` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input UserSteamInfoCondition {
  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `profileUrl` field."""
  profileUrl: String

  """Checks for equality with the object’s `avatar` field."""
  avatar: String

  """Checks for equality with the object’s `avatarMedium` field."""
  avatarMedium: String

  """Checks for equality with the object’s `avatarFull` field."""
  avatarFull: String

  """Checks for equality with the object’s `userId` field."""
  userId: UUID

  """Checks for equality with the object’s `numericSteamId` field."""
  numericSteamId: String

  """Checks for equality with the object’s `timeCreated` field."""
  timeCreated: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Time
}

"""An input for mutations affecting `UserSteamInfo`"""
input UserSteamInfoInput {
  name: String!
  profileUrl: String!
  avatar: String!
  avatarMedium: String!
  avatarFull: String!
  userId: UUID!
  numericSteamId: String!
  timeCreated: String!
  createdAt: Datetime
  updatedAt: Time
}

"""
Represents an update to a `UserSteamInfo`. Fields that are set will be updated.
"""
input UserSteamInfoPatch {
  name: String
  profileUrl: String
  avatar: String
  avatarMedium: String
  avatarFull: String
  userId: UUID
  numericSteamId: String
  timeCreated: String
  createdAt: Datetime
  updatedAt: Time
}

"""A connection to a list of `UserSteamInfo` values."""
type UserSteamInfosConnection {
  """A list of `UserSteamInfo` objects."""
  nodes: [UserSteamInfo]!

  """
  A list of edges which contains the `UserSteamInfo` and cursor to aid in pagination.
  """
  edges: [UserSteamInfosEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserSteamInfo` you could get from the connection."""
  totalCount: Int!
}

"""A `UserSteamInfo` edge in the connection."""
type UserSteamInfosEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserSteamInfo` at the end of the edge."""
  node: UserSteamInfo
}

"""Methods to use when ordering `UserSteamInfo`."""
enum UserSteamInfosOrderBy {
  NATURAL
  NAME_ASC
  NAME_DESC
  PROFILE_URL_ASC
  PROFILE_URL_DESC
  AVATAR_ASC
  AVATAR_DESC
  AVATAR_MEDIUM_ASC
  AVATAR_MEDIUM_DESC
  AVATAR_FULL_ASC
  AVATAR_FULL_DESC
  USER_ID_ASC
  USER_ID_DESC
  NUMERIC_STEAM_ID_ASC
  NUMERIC_STEAM_ID_DESC
  TIME_CREATED_ASC
  TIME_CREATED_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID
